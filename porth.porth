include "std.porth"

memory fh sizeof(ptr) end

// operand struct
const op.type sizeof(int) offset end
// const op.token sizeof(ptr) offset end
const op.operand sizeof(int) offset end
const sizeof(op) reset end

// ops enum
const OP_PUSH_INT 1 offset end
const OP_DUMP 1 offset end
const NO_OF_OPS reset end

const TK_SIZE 50 end

// operand struct
const token.type sizeof(int) offset end
// const op.token sizeof(ptr) offset end
const token.text TK_SIZE offset end
const sizeof(token) reset end


// token enum
const TK_WORD 1 offset end
const TK_INT 1 offset end
const NO_OF_TK_TYPS reset end 

//Arrays
memory program     sizeof(op) 1000 * end
memory program_len sizeof(int)       end

memory tokens sizeof(op) 1000 * end
memory tokens_len sizeof(int)       end

memory op_temp sizeof(op) end


OP_PUSH_INT op_temp !32
25 op_temp op.operand ptr+ !32
sizeof(op) op_temp program memcpy

OP_DUMP op_temp !32
sizeof(op) op_temp program <int> sizeof(op) + <ptr> memcpy

2 program_len !32



const LINE_SIZE 200 end 

memory lineBuffer LINE_SIZE end
memory charBuffer 4 end

proc testLet int int in
    let a b in
        a 20 +
        b 20 +
    end
    drop drop 
end

proc lex_line ptr in
    let buf in
        0 while 1 charBuffer fh @32 fread charBuffer @8 '\n' != land  do
            charBuffer stdout
            charBuffer @8 buf 2over ptr+ !8
            1 +
        end dro
        
    end
end


proc lex_file ptr in
    fopen fh !32
    lineBuffer lex_line
    lineBuffer stdout
    "\n" stdout
    lineBuffer lex_line
    lineBuffer stdout
    fh @32 fclose
end

"examples\\math.porth" lex_file


proc compile_program ptr in
    "porth_alt.asm" fopen fh !32
    fh @32 truncate

    ".386\n" fh fputs
    ".model flat, stdcall\n" fh fputs
    "option casemap:none\n" fh fputs
    "include C:\\masm32\\include\\windows.inc\n" fh fputs
    "include C:\\masm32\\include\\kernel32.inc\n" fh fputs
    "include C:\\masm32\\include\\user32.inc\n" fh fputs
    "include C:\\masm32\\include\\masm32.inc\n" fh fputs
    "includelib C:\\masm32\\lib\\kernel32.lib\n" fh fputs
    "includelib C:\\masm32\\lib\\user32.lib\n" fh fputs
    "includelib C:\\masm32\\lib\\masm32.lib\n" fh fputs
    ".data\n" fh fputs
    "   aSymb db 97, 0\n" fh fputs
    "   decimalstr db 16 DUP (0)\n" fh fputs
    "   negativeSign db 45\n" fh fputs
    "   nl DWORD 10\n" fh fputs
    ".code\n" fh fputs
    "   start PROC\n" fh fputs

    0 while dup program_len @32 <  do
        program over sizeof(op) * ptr+ 
        let op in
            op op.type ptr+ @32 OP_PUSH_INT = if 
                "       push 10\n" fh fputs
                "       pop eax\n" fh fputs

            else op op.type ptr+ @32 OP_DUMP = elif
                "       lea edi, decimalstr\n" fh fputs
                "       call DUMP    \n" fh fputs
                "       invoke StdOut, addr decimalstr\n" fh fputs
                "       invoke StdOut, addr nl        \n" fh fputs
            end
        end 
        1 +

    end drop

    "   start ENDP\n\n" fh fputs

    "  DUMP PROC\n" fh fputs
    "    mov ecx, eax\n" fh fputs
    "    shr ecx, 31\n\n" fh fputs

    "    .if ecx == 1\n" fh fputs
    "      xor eax, 0FFFFFFFFh\n" fh fputs
    "      inc eax\n" fh fputs
    "      mov esi, 1\n" fh fputs
    "    .else\n" fh fputs
    "      mov esi,0\n" fh fputs
    "    .endif\n" fh fputs
    "    mov ebx, 10             \n" fh fputs
    "    xor ecx, ecx            \n" fh fputs
    "  @@        :  \n" fh fputs
    "    xor edx, edx\n" fh fputs
    "    div ebx                 \n" fh fputs
    "    push dx                 \n" fh fputs
    "    add cl,1                \n" fh fputs
    "    or  eax, eax            \n" fh fputs
    "    jnz @B                  \n" fh fputs
    "  @@        :  \n" fh fputs
    "    pop ax                  \n" fh fputs
    "    or al, 00110000b        \n" fh fputs
    "    stosb                   \n" fh fputs
    "    loop @B                 \n" fh fputs
    "    mov byte ptr [edi], 0   \n" fh fputs
    "  .if esi   == 1\n" fh fputs
    "      invoke StdOut, addr negativeSign\n" fh fputs
    "  .endif\n" fh fputs

    "  ret                           \n" fh fputs
    "  DUMP ENDP\n" fh fputs


    "end start\n" fh fputs

    fh @32 fclose
    drop
end
program compile_program